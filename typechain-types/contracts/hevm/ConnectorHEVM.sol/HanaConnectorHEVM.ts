/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace HanaInterfaces {
  export type SendInputStruct = {
    destinationChainId: PromiseOrValue<BigNumberish>;
    destinationAddress: PromiseOrValue<BytesLike>;
    destinationGasLimit: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<BytesLike>;
    hanaValueAndGas: PromiseOrValue<BigNumberish>;
    hanaParams: PromiseOrValue<BytesLike>;
  };

  export type SendInputStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    destinationChainId: BigNumber;
    destinationAddress: string;
    destinationGasLimit: BigNumber;
    message: string;
    hanaValueAndGas: BigNumber;
    hanaParams: string;
  };
}

export interface HanaConnectorHEVMInterface extends utils.Interface {
  functions: {
    "FUNGIBLE_MODULE_ADDRESS()": FunctionFragment;
    "send((uint256,bytes,uint256,bytes,uint256,bytes))": FunctionFragment;
    "setWhanaAddress(address)": FunctionFragment;
    "whana()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FUNGIBLE_MODULE_ADDRESS"
      | "send"
      | "setWhanaAddress"
      | "whana"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FUNGIBLE_MODULE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [HanaInterfaces.SendInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhanaAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "whana", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FUNGIBLE_MODULE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhanaAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whana", data: BytesLike): Result;

  events: {
    "HanaSent(address,address,uint256,bytes,uint256,uint256,bytes,bytes)": EventFragment;
    "SetWHANA(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HanaSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWHANA"): EventFragment;
}

export interface HanaSentEventObject {
  sourceTxOriginAddress: string;
  hanaTxSenderAddress: string;
  destinationChainId: BigNumber;
  destinationAddress: string;
  hanaValueAndGas: BigNumber;
  destinationGasLimit: BigNumber;
  message: string;
  hanaParams: string;
}
export type HanaSentEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, string, string],
  HanaSentEventObject
>;

export type HanaSentEventFilter = TypedEventFilter<HanaSentEvent>;

export interface SetWHANAEventObject {
  whana_: string;
}
export type SetWHANAEvent = TypedEvent<[string], SetWHANAEventObject>;

export type SetWHANAEventFilter = TypedEventFilter<SetWHANAEvent>;

export interface HanaConnectorHEVM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HanaConnectorHEVMInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    send(
      input: HanaInterfaces.SendInputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhanaAddress(
      whana_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whana(overrides?: CallOverrides): Promise<[string]>;
  };

  FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<string>;

  send(
    input: HanaInterfaces.SendInputStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhanaAddress(
    whana_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whana(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<string>;

    send(
      input: HanaInterfaces.SendInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhanaAddress(
      whana_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whana(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "HanaSent(address,address,uint256,bytes,uint256,uint256,bytes,bytes)"(
      sourceTxOriginAddress?: null,
      hanaTxSenderAddress?: PromiseOrValue<string> | null,
      destinationChainId?: PromiseOrValue<BigNumberish> | null,
      destinationAddress?: null,
      hanaValueAndGas?: null,
      destinationGasLimit?: null,
      message?: null,
      hanaParams?: null
    ): HanaSentEventFilter;
    HanaSent(
      sourceTxOriginAddress?: null,
      hanaTxSenderAddress?: PromiseOrValue<string> | null,
      destinationChainId?: PromiseOrValue<BigNumberish> | null,
      destinationAddress?: null,
      hanaValueAndGas?: null,
      destinationGasLimit?: null,
      message?: null,
      hanaParams?: null
    ): HanaSentEventFilter;

    "SetWHANA(address)"(whana_?: null): SetWHANAEventFilter;
    SetWHANA(whana_?: null): SetWHANAEventFilter;
  };

  estimateGas: {
    FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    send(
      input: HanaInterfaces.SendInputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhanaAddress(
      whana_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whana(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FUNGIBLE_MODULE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    send(
      input: HanaInterfaces.SendInputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhanaAddress(
      whana_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whana(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
