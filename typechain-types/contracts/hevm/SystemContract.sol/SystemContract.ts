/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type HContextStruct = {
  origin: PromiseOrValue<BytesLike>;
  sender: PromiseOrValue<string>;
  chainID: PromiseOrValue<BigNumberish>;
};

export type HContextStructOutput = [string, string, BigNumber] & {
  origin: string;
  sender: string;
  chainID: BigNumber;
};

export interface SystemContractInterface extends utils.Interface {
  functions: {
    "FUNGIBLE_MODULE_ADDRESS()": FunctionFragment;
    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)": FunctionFragment;
    "gasCoinHRC20ByChainId(uint256)": FunctionFragment;
    "gasHanaPoolByChainId(uint256)": FunctionFragment;
    "gasPriceByChainId(uint256)": FunctionFragment;
    "hanaConnectorHEVMAddress()": FunctionFragment;
    "setConnectorHEVMAddress(address)": FunctionFragment;
    "setGasCoinHRC20(uint256,address)": FunctionFragment;
    "setGasHanaPool(uint256,address)": FunctionFragment;
    "setGasPrice(uint256,uint256)": FunctionFragment;
    "setWHANAContractAddress(address)": FunctionFragment;
    "uniswapv2FactoryAddress()": FunctionFragment;
    "uniswapv2PairFor(address,address,address)": FunctionFragment;
    "uniswapv2Router02Address()": FunctionFragment;
    "wHanaContractAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FUNGIBLE_MODULE_ADDRESS"
      | "depositAndCall"
      | "gasCoinHRC20ByChainId"
      | "gasHanaPoolByChainId"
      | "gasPriceByChainId"
      | "hanaConnectorHEVMAddress"
      | "setConnectorHEVMAddress"
      | "setGasCoinHRC20"
      | "setGasHanaPool"
      | "setGasPrice"
      | "setWHANAContractAddress"
      | "uniswapv2FactoryAddress"
      | "uniswapv2PairFor"
      | "uniswapv2Router02Address"
      | "wHanaContractAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FUNGIBLE_MODULE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCall",
    values: [
      HContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gasCoinHRC20ByChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gasHanaPoolByChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gasPriceByChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hanaConnectorHEVMAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConnectorHEVMAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasCoinHRC20",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasHanaPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWHANAContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapv2FactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapv2PairFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapv2Router02Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wHanaContractAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FUNGIBLE_MODULE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasCoinHRC20ByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasHanaPoolByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hanaConnectorHEVMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConnectorHEVMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasCoinHRC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasHanaPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWHANAContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapv2FactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapv2PairFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapv2Router02Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wHanaContractAddress",
    data: BytesLike
  ): Result;

  events: {
    "SetConnectorHEVM(address)": EventFragment;
    "SetGasCoin(uint256,address)": EventFragment;
    "SetGasHanaPool(uint256,address)": EventFragment;
    "SetGasPrice(uint256,uint256)": EventFragment;
    "SetWHana(address)": EventFragment;
    "SystemContractDeployed()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetConnectorHEVM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasCoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasHanaPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWHana"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SystemContractDeployed"): EventFragment;
}

export interface SetConnectorHEVMEventObject {
  arg0: string;
}
export type SetConnectorHEVMEvent = TypedEvent<
  [string],
  SetConnectorHEVMEventObject
>;

export type SetConnectorHEVMEventFilter =
  TypedEventFilter<SetConnectorHEVMEvent>;

export interface SetGasCoinEventObject {
  arg0: BigNumber;
  arg1: string;
}
export type SetGasCoinEvent = TypedEvent<
  [BigNumber, string],
  SetGasCoinEventObject
>;

export type SetGasCoinEventFilter = TypedEventFilter<SetGasCoinEvent>;

export interface SetGasHanaPoolEventObject {
  arg0: BigNumber;
  arg1: string;
}
export type SetGasHanaPoolEvent = TypedEvent<
  [BigNumber, string],
  SetGasHanaPoolEventObject
>;

export type SetGasHanaPoolEventFilter = TypedEventFilter<SetGasHanaPoolEvent>;

export interface SetGasPriceEventObject {
  arg0: BigNumber;
  arg1: BigNumber;
}
export type SetGasPriceEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetGasPriceEventObject
>;

export type SetGasPriceEventFilter = TypedEventFilter<SetGasPriceEvent>;

export interface SetWHanaEventObject {
  arg0: string;
}
export type SetWHanaEvent = TypedEvent<[string], SetWHanaEventObject>;

export type SetWHanaEventFilter = TypedEventFilter<SetWHanaEvent>;

export interface SystemContractDeployedEventObject {}
export type SystemContractDeployedEvent = TypedEvent<
  [],
  SystemContractDeployedEventObject
>;

export type SystemContractDeployedEventFilter =
  TypedEventFilter<SystemContractDeployedEvent>;

export interface SystemContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SystemContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    depositAndCall(
      context: HContextStruct,
      hrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gasCoinHRC20ByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gasHanaPoolByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gasPriceByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hanaConnectorHEVMAddress(overrides?: CallOverrides): Promise<[string]>;

    setConnectorHEVMAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasCoinHRC20(
      chainID: PromiseOrValue<BigNumberish>,
      hrc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasHanaPool(
      chainID: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWHANAContractAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapv2FactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    uniswapv2PairFor(
      factory: PromiseOrValue<string>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    uniswapv2Router02Address(overrides?: CallOverrides): Promise<[string]>;

    wHanaContractAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<string>;

  depositAndCall(
    context: HContextStruct,
    hrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gasCoinHRC20ByChainId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  gasHanaPoolByChainId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  gasPriceByChainId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hanaConnectorHEVMAddress(overrides?: CallOverrides): Promise<string>;

  setConnectorHEVMAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasCoinHRC20(
    chainID: PromiseOrValue<BigNumberish>,
    hrc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasHanaPool(
    chainID: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasPrice(
    chainID: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWHANAContractAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapv2FactoryAddress(overrides?: CallOverrides): Promise<string>;

  uniswapv2PairFor(
    factory: PromiseOrValue<string>,
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  uniswapv2Router02Address(overrides?: CallOverrides): Promise<string>;

  wHanaContractAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<string>;

    depositAndCall(
      context: HContextStruct,
      hrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    gasCoinHRC20ByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    gasHanaPoolByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    gasPriceByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hanaConnectorHEVMAddress(overrides?: CallOverrides): Promise<string>;

    setConnectorHEVMAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasCoinHRC20(
      chainID: PromiseOrValue<BigNumberish>,
      hrc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasHanaPool(
      chainID: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWHANAContractAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapv2FactoryAddress(overrides?: CallOverrides): Promise<string>;

    uniswapv2PairFor(
      factory: PromiseOrValue<string>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    uniswapv2Router02Address(overrides?: CallOverrides): Promise<string>;

    wHanaContractAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SetConnectorHEVM(address)"(arg0?: null): SetConnectorHEVMEventFilter;
    SetConnectorHEVM(arg0?: null): SetConnectorHEVMEventFilter;

    "SetGasCoin(uint256,address)"(
      arg0?: null,
      arg1?: null
    ): SetGasCoinEventFilter;
    SetGasCoin(arg0?: null, arg1?: null): SetGasCoinEventFilter;

    "SetGasHanaPool(uint256,address)"(
      arg0?: null,
      arg1?: null
    ): SetGasHanaPoolEventFilter;
    SetGasHanaPool(arg0?: null, arg1?: null): SetGasHanaPoolEventFilter;

    "SetGasPrice(uint256,uint256)"(
      arg0?: null,
      arg1?: null
    ): SetGasPriceEventFilter;
    SetGasPrice(arg0?: null, arg1?: null): SetGasPriceEventFilter;

    "SetWHana(address)"(arg0?: null): SetWHanaEventFilter;
    SetWHana(arg0?: null): SetWHanaEventFilter;

    "SystemContractDeployed()"(): SystemContractDeployedEventFilter;
    SystemContractDeployed(): SystemContractDeployedEventFilter;
  };

  estimateGas: {
    FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndCall(
      context: HContextStruct,
      hrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gasCoinHRC20ByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gasHanaPoolByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gasPriceByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hanaConnectorHEVMAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setConnectorHEVMAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasCoinHRC20(
      chainID: PromiseOrValue<BigNumberish>,
      hrc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasHanaPool(
      chainID: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWHANAContractAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapv2FactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapv2PairFor(
      factory: PromiseOrValue<string>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapv2Router02Address(overrides?: CallOverrides): Promise<BigNumber>;

    wHanaContractAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FUNGIBLE_MODULE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAndCall(
      context: HContextStruct,
      hrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gasCoinHRC20ByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gasHanaPoolByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gasPriceByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hanaConnectorHEVMAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConnectorHEVMAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasCoinHRC20(
      chainID: PromiseOrValue<BigNumberish>,
      hrc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasHanaPool(
      chainID: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWHANAContractAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapv2FactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapv2PairFor(
      factory: PromiseOrValue<string>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapv2Router02Address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wHanaContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
