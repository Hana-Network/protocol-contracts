/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface HanaTokenConsumerInterface extends utils.Interface {
  functions: {
    "getEthFromHana(address,uint256,uint256)": FunctionFragment;
    "getHanaFromEth(address,uint256)": FunctionFragment;
    "getHanaFromToken(address,uint256,address,uint256)": FunctionFragment;
    "getTokenFromHana(address,uint256,address,uint256)": FunctionFragment;
    "hasHanaLiquidity()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getEthFromHana"
      | "getHanaFromEth"
      | "getHanaFromToken"
      | "getTokenFromHana"
      | "hasHanaLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEthFromHana",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getHanaFromEth",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHanaFromToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFromHana",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasHanaLiquidity",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getEthFromHana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHanaFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHanaFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFromHana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasHanaLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "EthExchangedForHana(uint256,uint256)": EventFragment;
    "HanaExchangedForEth(uint256,uint256)": EventFragment;
    "HanaExchangedForToken(address,uint256,uint256)": EventFragment;
    "TokenExchangedForHana(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthExchangedForHana"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HanaExchangedForEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HanaExchangedForToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenExchangedForHana"): EventFragment;
}

export interface EthExchangedForHanaEventObject {
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type EthExchangedForHanaEvent = TypedEvent<
  [BigNumber, BigNumber],
  EthExchangedForHanaEventObject
>;

export type EthExchangedForHanaEventFilter =
  TypedEventFilter<EthExchangedForHanaEvent>;

export interface HanaExchangedForEthEventObject {
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type HanaExchangedForEthEvent = TypedEvent<
  [BigNumber, BigNumber],
  HanaExchangedForEthEventObject
>;

export type HanaExchangedForEthEventFilter =
  TypedEventFilter<HanaExchangedForEthEvent>;

export interface HanaExchangedForTokenEventObject {
  token: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type HanaExchangedForTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  HanaExchangedForTokenEventObject
>;

export type HanaExchangedForTokenEventFilter =
  TypedEventFilter<HanaExchangedForTokenEvent>;

export interface TokenExchangedForHanaEventObject {
  token: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type TokenExchangedForHanaEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokenExchangedForHanaEventObject
>;

export type TokenExchangedForHanaEventFilter =
  TypedEventFilter<TokenExchangedForHanaEvent>;

export interface HanaTokenConsumer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HanaTokenConsumerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEthFromHana(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      hanaTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getHanaFromEth(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getHanaFromToken(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      inputToken: PromiseOrValue<string>,
      inputTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTokenFromHana(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      outputToken: PromiseOrValue<string>,
      hanaTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasHanaLiquidity(overrides?: CallOverrides): Promise<[boolean]>;
  };

  getEthFromHana(
    destinationAddress: PromiseOrValue<string>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    hanaTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getHanaFromEth(
    destinationAddress: PromiseOrValue<string>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getHanaFromToken(
    destinationAddress: PromiseOrValue<string>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    inputToken: PromiseOrValue<string>,
    inputTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTokenFromHana(
    destinationAddress: PromiseOrValue<string>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    outputToken: PromiseOrValue<string>,
    hanaTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasHanaLiquidity(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    getEthFromHana(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      hanaTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHanaFromEth(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHanaFromToken(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      inputToken: PromiseOrValue<string>,
      inputTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenFromHana(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      outputToken: PromiseOrValue<string>,
      hanaTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasHanaLiquidity(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "EthExchangedForHana(uint256,uint256)"(
      amountIn?: null,
      amountOut?: null
    ): EthExchangedForHanaEventFilter;
    EthExchangedForHana(
      amountIn?: null,
      amountOut?: null
    ): EthExchangedForHanaEventFilter;

    "HanaExchangedForEth(uint256,uint256)"(
      amountIn?: null,
      amountOut?: null
    ): HanaExchangedForEthEventFilter;
    HanaExchangedForEth(
      amountIn?: null,
      amountOut?: null
    ): HanaExchangedForEthEventFilter;

    "HanaExchangedForToken(address,uint256,uint256)"(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): HanaExchangedForTokenEventFilter;
    HanaExchangedForToken(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): HanaExchangedForTokenEventFilter;

    "TokenExchangedForHana(address,uint256,uint256)"(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): TokenExchangedForHanaEventFilter;
    TokenExchangedForHana(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): TokenExchangedForHanaEventFilter;
  };

  estimateGas: {
    getEthFromHana(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      hanaTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getHanaFromEth(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getHanaFromToken(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      inputToken: PromiseOrValue<string>,
      inputTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTokenFromHana(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      outputToken: PromiseOrValue<string>,
      hanaTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasHanaLiquidity(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getEthFromHana(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      hanaTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getHanaFromEth(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getHanaFromToken(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      inputToken: PromiseOrValue<string>,
      inputTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTokenFromHana(
      destinationAddress: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      outputToken: PromiseOrValue<string>,
      hanaTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasHanaLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
