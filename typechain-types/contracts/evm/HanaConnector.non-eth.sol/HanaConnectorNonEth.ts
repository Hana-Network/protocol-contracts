/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace HanaInterfaces {
  export type SendInputStruct = {
    destinationChainId: PromiseOrValue<BigNumberish>;
    destinationAddress: PromiseOrValue<BytesLike>;
    destinationGasLimit: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<BytesLike>;
    hanaValueAndGas: PromiseOrValue<BigNumberish>;
    hanaParams: PromiseOrValue<BytesLike>;
  };

  export type SendInputStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    destinationChainId: BigNumber;
    destinationAddress: string;
    destinationGasLimit: BigNumber;
    message: string;
    hanaValueAndGas: BigNumber;
    hanaParams: string;
  };
}

export interface HanaConnectorNonEthInterface extends utils.Interface {
  functions: {
    "getLockedAmount()": FunctionFragment;
    "hanaToken()": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "onReceive(bytes,uint256,address,uint256,bytes,bytes32)": FunctionFragment;
    "onRevert(address,uint256,bytes,uint256,uint256,bytes,bytes32)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pauserAddress()": FunctionFragment;
    "renounceTssAddressUpdater()": FunctionFragment;
    "send((uint256,bytes,uint256,bytes,uint256,bytes))": FunctionFragment;
    "setMaxSupply(uint256)": FunctionFragment;
    "tssAddress()": FunctionFragment;
    "tssAddressUpdater()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePauserAddress(address)": FunctionFragment;
    "updateTssAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getLockedAmount"
      | "hanaToken"
      | "maxSupply"
      | "onReceive"
      | "onRevert"
      | "pause"
      | "paused"
      | "pauserAddress"
      | "renounceTssAddressUpdater"
      | "send"
      | "setMaxSupply"
      | "tssAddress"
      | "tssAddressUpdater"
      | "unpause"
      | "updatePauserAddress"
      | "updateTssAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hanaToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onReceive",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onRevert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauserAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceTssAddressUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [HanaInterfaces.SendInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tssAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tssAddressUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePauserAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTssAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hanaToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onRevert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceTssAddressUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tssAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tssAddressUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePauserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTssAddress",
    data: BytesLike
  ): Result;

  events: {
    "HanaReceived(bytes,uint256,address,uint256,bytes,bytes32)": EventFragment;
    "HanaReverted(address,uint256,uint256,bytes,uint256,bytes,bytes32)": EventFragment;
    "HanaSent(address,address,uint256,bytes,uint256,uint256,bytes,bytes)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserAddressUpdated(address,address)": EventFragment;
    "TSSAddressUpdated(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HanaReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HanaReverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HanaSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TSSAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface HanaReceivedEventObject {
  hanaTxSenderAddress: string;
  sourceChainId: BigNumber;
  destinationAddress: string;
  hanaValue: BigNumber;
  message: string;
  internalSendHash: string;
}
export type HanaReceivedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string],
  HanaReceivedEventObject
>;

export type HanaReceivedEventFilter = TypedEventFilter<HanaReceivedEvent>;

export interface HanaRevertedEventObject {
  hanaTxSenderAddress: string;
  sourceChainId: BigNumber;
  destinationChainId: BigNumber;
  destinationAddress: string;
  remainingHanaValue: BigNumber;
  message: string;
  internalSendHash: string;
}
export type HanaRevertedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, string, string],
  HanaRevertedEventObject
>;

export type HanaRevertedEventFilter = TypedEventFilter<HanaRevertedEvent>;

export interface HanaSentEventObject {
  sourceTxOriginAddress: string;
  hanaTxSenderAddress: string;
  destinationChainId: BigNumber;
  destinationAddress: string;
  hanaValueAndGas: BigNumber;
  destinationGasLimit: BigNumber;
  message: string;
  hanaParams: string;
}
export type HanaSentEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, string, string],
  HanaSentEventObject
>;

export type HanaSentEventFilter = TypedEventFilter<HanaSentEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PauserAddressUpdatedEventObject {
  updaterAddress: string;
  newTssAddress: string;
}
export type PauserAddressUpdatedEvent = TypedEvent<
  [string, string],
  PauserAddressUpdatedEventObject
>;

export type PauserAddressUpdatedEventFilter =
  TypedEventFilter<PauserAddressUpdatedEvent>;

export interface TSSAddressUpdatedEventObject {
  hanaTxSenderAddress: string;
  newTssAddress: string;
}
export type TSSAddressUpdatedEvent = TypedEvent<
  [string, string],
  TSSAddressUpdatedEventObject
>;

export type TSSAddressUpdatedEventFilter =
  TypedEventFilter<TSSAddressUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface HanaConnectorNonEth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HanaConnectorNonEthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLockedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    hanaToken(overrides?: CallOverrides): Promise<[string]>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    onReceive(
      hanaTxSenderAddress: PromiseOrValue<BytesLike>,
      sourceChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      hanaValue: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      internalSendHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onRevert(
      hanaTxSenderAddress: PromiseOrValue<string>,
      sourceChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<BytesLike>,
      destinationChainId: PromiseOrValue<BigNumberish>,
      remainingHanaValue: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      internalSendHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pauserAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceTssAddressUpdater(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      input: HanaInterfaces.SendInputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxSupply(
      maxSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tssAddress(overrides?: CallOverrides): Promise<[string]>;

    tssAddressUpdater(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePauserAddress(
      pauserAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTssAddress(
      tssAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  hanaToken(overrides?: CallOverrides): Promise<string>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  onReceive(
    hanaTxSenderAddress: PromiseOrValue<BytesLike>,
    sourceChainId: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    hanaValue: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<BytesLike>,
    internalSendHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onRevert(
    hanaTxSenderAddress: PromiseOrValue<string>,
    sourceChainId: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<BytesLike>,
    destinationChainId: PromiseOrValue<BigNumberish>,
    remainingHanaValue: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<BytesLike>,
    internalSendHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pauserAddress(overrides?: CallOverrides): Promise<string>;

  renounceTssAddressUpdater(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    input: HanaInterfaces.SendInputStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxSupply(
    maxSupply_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tssAddress(overrides?: CallOverrides): Promise<string>;

  tssAddressUpdater(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePauserAddress(
    pauserAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTssAddress(
    tssAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    hanaToken(overrides?: CallOverrides): Promise<string>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    onReceive(
      hanaTxSenderAddress: PromiseOrValue<BytesLike>,
      sourceChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      hanaValue: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      internalSendHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    onRevert(
      hanaTxSenderAddress: PromiseOrValue<string>,
      sourceChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<BytesLike>,
      destinationChainId: PromiseOrValue<BigNumberish>,
      remainingHanaValue: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      internalSendHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pauserAddress(overrides?: CallOverrides): Promise<string>;

    renounceTssAddressUpdater(overrides?: CallOverrides): Promise<void>;

    send(
      input: HanaInterfaces.SendInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupply(
      maxSupply_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tssAddress(overrides?: CallOverrides): Promise<string>;

    tssAddressUpdater(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePauserAddress(
      pauserAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTssAddress(
      tssAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HanaReceived(bytes,uint256,address,uint256,bytes,bytes32)"(
      hanaTxSenderAddress?: null,
      sourceChainId?: PromiseOrValue<BigNumberish> | null,
      destinationAddress?: PromiseOrValue<string> | null,
      hanaValue?: null,
      message?: null,
      internalSendHash?: PromiseOrValue<BytesLike> | null
    ): HanaReceivedEventFilter;
    HanaReceived(
      hanaTxSenderAddress?: null,
      sourceChainId?: PromiseOrValue<BigNumberish> | null,
      destinationAddress?: PromiseOrValue<string> | null,
      hanaValue?: null,
      message?: null,
      internalSendHash?: PromiseOrValue<BytesLike> | null
    ): HanaReceivedEventFilter;

    "HanaReverted(address,uint256,uint256,bytes,uint256,bytes,bytes32)"(
      hanaTxSenderAddress?: null,
      sourceChainId?: null,
      destinationChainId?: PromiseOrValue<BigNumberish> | null,
      destinationAddress?: null,
      remainingHanaValue?: null,
      message?: null,
      internalSendHash?: PromiseOrValue<BytesLike> | null
    ): HanaRevertedEventFilter;
    HanaReverted(
      hanaTxSenderAddress?: null,
      sourceChainId?: null,
      destinationChainId?: PromiseOrValue<BigNumberish> | null,
      destinationAddress?: null,
      remainingHanaValue?: null,
      message?: null,
      internalSendHash?: PromiseOrValue<BytesLike> | null
    ): HanaRevertedEventFilter;

    "HanaSent(address,address,uint256,bytes,uint256,uint256,bytes,bytes)"(
      sourceTxOriginAddress?: null,
      hanaTxSenderAddress?: PromiseOrValue<string> | null,
      destinationChainId?: PromiseOrValue<BigNumberish> | null,
      destinationAddress?: null,
      hanaValueAndGas?: null,
      destinationGasLimit?: null,
      message?: null,
      hanaParams?: null
    ): HanaSentEventFilter;
    HanaSent(
      sourceTxOriginAddress?: null,
      hanaTxSenderAddress?: PromiseOrValue<string> | null,
      destinationChainId?: PromiseOrValue<BigNumberish> | null,
      destinationAddress?: null,
      hanaValueAndGas?: null,
      destinationGasLimit?: null,
      message?: null,
      hanaParams?: null
    ): HanaSentEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PauserAddressUpdated(address,address)"(
      updaterAddress?: null,
      newTssAddress?: null
    ): PauserAddressUpdatedEventFilter;
    PauserAddressUpdated(
      updaterAddress?: null,
      newTssAddress?: null
    ): PauserAddressUpdatedEventFilter;

    "TSSAddressUpdated(address,address)"(
      hanaTxSenderAddress?: null,
      newTssAddress?: null
    ): TSSAddressUpdatedEventFilter;
    TSSAddressUpdated(
      hanaTxSenderAddress?: null,
      newTssAddress?: null
    ): TSSAddressUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    getLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    hanaToken(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    onReceive(
      hanaTxSenderAddress: PromiseOrValue<BytesLike>,
      sourceChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      hanaValue: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      internalSendHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onRevert(
      hanaTxSenderAddress: PromiseOrValue<string>,
      sourceChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<BytesLike>,
      destinationChainId: PromiseOrValue<BigNumberish>,
      remainingHanaValue: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      internalSendHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pauserAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceTssAddressUpdater(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      input: HanaInterfaces.SendInputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxSupply(
      maxSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tssAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tssAddressUpdater(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePauserAddress(
      pauserAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTssAddress(
      tssAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLockedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hanaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onReceive(
      hanaTxSenderAddress: PromiseOrValue<BytesLike>,
      sourceChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      hanaValue: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      internalSendHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onRevert(
      hanaTxSenderAddress: PromiseOrValue<string>,
      sourceChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<BytesLike>,
      destinationChainId: PromiseOrValue<BigNumberish>,
      remainingHanaValue: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      internalSendHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauserAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceTssAddressUpdater(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      input: HanaInterfaces.SendInputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupply(
      maxSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tssAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tssAddressUpdater(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePauserAddress(
      pauserAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTssAddress(
      tssAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
