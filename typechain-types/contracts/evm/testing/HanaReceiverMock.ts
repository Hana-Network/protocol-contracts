/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace HanaInterfaces {
  export type HanaMessageStruct = {
    hanaTxSenderAddress: PromiseOrValue<BytesLike>;
    sourceChainId: PromiseOrValue<BigNumberish>;
    destinationAddress: PromiseOrValue<string>;
    hanaValue: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<BytesLike>;
  };

  export type HanaMessageStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    hanaTxSenderAddress: string;
    sourceChainId: BigNumber;
    destinationAddress: string;
    hanaValue: BigNumber;
    message: string;
  };

  export type HanaRevertStruct = {
    hanaTxSenderAddress: PromiseOrValue<string>;
    sourceChainId: PromiseOrValue<BigNumberish>;
    destinationAddress: PromiseOrValue<BytesLike>;
    destinationChainId: PromiseOrValue<BigNumberish>;
    remainingHanaValue: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<BytesLike>;
  };

  export type HanaRevertStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    hanaTxSenderAddress: string;
    sourceChainId: BigNumber;
    destinationAddress: string;
    destinationChainId: BigNumber;
    remainingHanaValue: BigNumber;
    message: string;
  };
}

export interface HanaReceiverMockInterface extends utils.Interface {
  functions: {
    "onHanaMessage((bytes,uint256,address,uint256,bytes))": FunctionFragment;
    "onHanaRevert((address,uint256,bytes,uint256,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "onHanaMessage" | "onHanaRevert"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onHanaMessage",
    values: [HanaInterfaces.HanaMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onHanaRevert",
    values: [HanaInterfaces.HanaRevertStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "onHanaMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onHanaRevert",
    data: BytesLike
  ): Result;

  events: {
    "MockOnHanaMessage(address)": EventFragment;
    "MockOnHanaRevert(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MockOnHanaMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MockOnHanaRevert"): EventFragment;
}

export interface MockOnHanaMessageEventObject {
  destinationAddress: string;
}
export type MockOnHanaMessageEvent = TypedEvent<
  [string],
  MockOnHanaMessageEventObject
>;

export type MockOnHanaMessageEventFilter =
  TypedEventFilter<MockOnHanaMessageEvent>;

export interface MockOnHanaRevertEventObject {
  hanaTxSenderAddress: string;
}
export type MockOnHanaRevertEvent = TypedEvent<
  [string],
  MockOnHanaRevertEventObject
>;

export type MockOnHanaRevertEventFilter =
  TypedEventFilter<MockOnHanaRevertEvent>;

export interface HanaReceiverMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HanaReceiverMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    onHanaMessage(
      hanaMessage: HanaInterfaces.HanaMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onHanaRevert(
      hanaRevert: HanaInterfaces.HanaRevertStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  onHanaMessage(
    hanaMessage: HanaInterfaces.HanaMessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onHanaRevert(
    hanaRevert: HanaInterfaces.HanaRevertStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    onHanaMessage(
      hanaMessage: HanaInterfaces.HanaMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onHanaRevert(
      hanaRevert: HanaInterfaces.HanaRevertStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MockOnHanaMessage(address)"(
      destinationAddress?: null
    ): MockOnHanaMessageEventFilter;
    MockOnHanaMessage(destinationAddress?: null): MockOnHanaMessageEventFilter;

    "MockOnHanaRevert(address)"(
      hanaTxSenderAddress?: null
    ): MockOnHanaRevertEventFilter;
    MockOnHanaRevert(hanaTxSenderAddress?: null): MockOnHanaRevertEventFilter;
  };

  estimateGas: {
    onHanaMessage(
      hanaMessage: HanaInterfaces.HanaMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onHanaRevert(
      hanaRevert: HanaInterfaces.HanaRevertStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    onHanaMessage(
      hanaMessage: HanaInterfaces.HanaMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onHanaRevert(
      hanaRevert: HanaInterfaces.HanaRevertStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
