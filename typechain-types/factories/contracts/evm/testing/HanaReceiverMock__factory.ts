/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  HanaReceiverMock,
  HanaReceiverMockInterface,
} from "../../../../contracts/evm/testing/HanaReceiverMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "destinationAddress",
        type: "address",
      },
    ],
    name: "MockOnHanaMessage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "hanaTxSenderAddress",
        type: "address",
      },
    ],
    name: "MockOnHanaRevert",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "hanaTxSenderAddress",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "sourceChainId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "destinationAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "hanaValue",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct HanaInterfaces.HanaMessage",
        name: "hanaMessage",
        type: "tuple",
      },
    ],
    name: "onHanaMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "hanaTxSenderAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sourceChainId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "destinationAddress",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "destinationChainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "remainingHanaValue",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct HanaInterfaces.HanaRevert",
        name: "hanaRevert",
        type: "tuple",
      },
    ],
    name: "onHanaRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102d5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634204cf9b1461003b578063b204be9314610057575b600080fd5b610055600480360381019061005091906101d4565b610073565b005b610071600480360381019061006c919061018b565b6100bf565b005b7f038b3b35b75bcab7cbeac0fe3b4c1b6dd122dff390d20be23e270a89d7d7550c8160000160208101906100a7919061015e565b6040516100b4919061022c565b60405180910390a150565b7f5918e0a29c5ec5a8cb80256eba14d26ff045577fee0e40f47b15f0cbdd8593518160400160208101906100f3919061015e565b604051610100919061022c565b60405180910390a150565b60008135905061011a81610288565b92915050565b600060a0828403121561013657610135610279565b5b81905092915050565b600060c0828403121561015557610154610279565b5b81905092915050565b60006020828403121561017457610173610283565b5b60006101828482850161010b565b91505092915050565b6000602082840312156101a1576101a0610283565b5b600082013567ffffffffffffffff8111156101bf576101be61027e565b5b6101cb84828501610120565b91505092915050565b6000602082840312156101ea576101e9610283565b5b600082013567ffffffffffffffff8111156102085761020761027e565b5b6102148482850161013f565b91505092915050565b61022681610247565b82525050565b6000602082019050610241600083018461021d565b92915050565b600061025282610259565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b600080fd5b600080fd5b61029181610247565b811461029c57600080fd5b5056fea2646970667358221220b979fb2e6713570cb53b79bcd103aa8c32f927cf7d380b5543504e7b85fbc90a64736f6c63430008070033";

type HanaReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HanaReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HanaReceiverMock__factory extends ContractFactory {
  constructor(...args: HanaReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HanaReceiverMock> {
    return super.deploy(overrides || {}) as Promise<HanaReceiverMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HanaReceiverMock {
    return super.attach(address) as HanaReceiverMock;
  }
  override connect(signer: Signer): HanaReceiverMock__factory {
    return super.connect(signer) as HanaReceiverMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HanaReceiverMockInterface {
    return new utils.Interface(_abi) as HanaReceiverMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HanaReceiverMock {
    return new Contract(address, _abi, signerOrProvider) as HanaReceiverMock;
  }
}
